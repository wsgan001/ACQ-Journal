package hku.algo.index.edgeUpdate;

import java.util.*;


import hku.Config;
import hku.algo.DataReader;
import hku.algo.TNode;
import hku.algo.index.AdvancedIndex;

public class cykTest {
	
	public boolean compare(TNode[] invert1, TNode[] invert2){
		for(int i=1;i<invert1.length;i++) {
//			System.out.println(i);
			if(invert1[i].getNodeSet().size()!=invert2[i].getNodeSet().size() || invert1[i].getChildList().size()!=invert2[i].getChildList().size()){
				System.out.println("compare");
				System.out.println(invert1[i].getNodeSet().size());
				System.out.println(invert2[i].getNodeSet().size());
				System.out.println(invert1[i].getChildList().size());
				System.out.println(invert2[i].getChildList().size());
				System.out.println(invert1[i].getCore()+"  "+invert2[i].getCore());
				return false;
				}
		}
		return true;
	}
	
	private boolean edgeExist(int u,int v, int[][]graph){
		for(int neighbor:graph[u]){
			if(neighbor==v) return true;
		}
		return false;
	}
	
	public void test500(int[][] graph1,String[][] nodes1){
		int count=0;
		int validTst=0;
		double rebuildTime=0.0;
		double insertTime=0.0;
		for(int i=1;i<51;i++){
			Random random=new Random();
			int u=random.nextInt(graph1.length);
			int v=random.nextInt(graph1.length);
			System.out.println("第 "+i+" 次测试: "+u+ "  " +v);
			if(!edgeExist(u, v,graph1)){
				validTst++;
				AdvancedIndex ac1=new AdvancedIndex(graph1, nodes1);
				TNode root312=ac1.build();
				
				EdgeInsertion edgeUpdate2=new EdgeInsertion(root312, ac1.getInvert(), graph1, nodes1,ac1.getCore());
				
				long time1=System.nanoTime();
				TNode  newroot=edgeUpdate2.insertEdge(u,v);
				long time2=System.nanoTime();
				insertTime+=time2-time1;
				
				
				long time3=System.nanoTime();
				TNode[] array3=edgeUpdate2.rebuild();
				long time4=System.nanoTime();
				rebuildTime+=time4-time3;
				System.out.println("重建时间需要："+(time4-time3)/1000000+ " 动态修改时间： "+(time2-time1)/1000);
				TNode[] array4=edgeUpdate2.travseToInvert(newroot);
				boolean result=compare(array3, array4);
				if(result) count++;
				System.out.println("______"+result);
			}else {
				System.out.println("edge has already exist!");
			}
		 }
//		System.out.println("有效测试次数 "+validTst+"  正确次数 "+count);
		System.out.println("正确次数 "+count);
		System.out.println("时间效率对比："+rebuildTime/insertTime);
	}
	

	public static void main(String[] args){
		 
		int graph[][] = new int[19][];
		 int a1[] = {2,3};	graph[1] = a1;
		 int a2[] = {1,3,4,9};	graph[2] = a2;
		 int a3[] = {1,2,4,5,6,7};	graph[3] = a3;
		 int a4[] = {2,3,5,6,7};	graph[4] = a4;
		 int a5[] = {3,4,6,7,8};	graph[5] = a5;
		 int a6[] = {3,4,5,7,8};	graph[6] = a6;
		 int a7[] = {3,4,5,6,9};	graph[7] = a7;
		 int a8[] = {5,6};	graph[8] = a8;
		 int a9[] = {2,7,10};	graph[9] = a9;
		 int a10[] = {9,11,18};	graph[10] = a10;
		 int a11[] = {10,12,13};	graph[11] = a11;
		 int a12[] = {11,13};	graph[12] = a12;
		 int a13[] = {11,12,14,17};	graph[13] = a13;
		 int a14[] = {13,15,16,17};	graph[14] = a14;
		 int a15[] = {14,16,17};	graph[15] = a15;
		 int a16[] = {14,15,17,18};	graph[16] = a16;
		 int a17[] = {13,14,15,16,18};	graph[17] = a17;
		 int a18[] = {10,16,17};	graph[18] = a18;
		 
		 String nodes[][] = new String[graph.length][];
		 String b1[] = {"w"};	nodes[1] = b1;
		 String b2[] = {"x"};	nodes[2] = b2;
		 String b3[] = {"x", "y"};	nodes[3] = b3;
		 String b4[] = {"z", "x", "y"};	nodes[4] = b4;
		 String b5[] = {"y", "z"};	nodes[5] = b5;
		 String b6[] = {"y"};	nodes[6] = b6;
		 String b7[] = {"x", "y"};	nodes[7] = b7;
		 String b8[] = {"y", "z"};	nodes[8] = b8;
		 String b9[] = {"x"};	nodes[9] = b9;
		 String b10[] = {"x"};	nodes[10] = b10;
		 String b11[] = {"w"};	nodes[11] = b11;
		 String b12[] = {"w"};	nodes[12] = b12;
		 String b13[] = {"w"};	nodes[13] = b13;
		 String b14[] = {"w"};	nodes[14] = b14;
		 String b15[] = {"w"};	nodes[15] = b15;
		 String b16[] = {"w"};	nodes[16] = b16;
		 String b17[] = {"w"};	nodes[17] = b17;
		 String b18[] = {"w"};	nodes[18] = b18;
		 
//		AdvancedIndex ac=new AdvancedIndex(graph, nodes);
//		 TNode root=ac.build();
////////		 TNode[] in=ac.getInvert();
//////		 
//		 ac.traverse(root);
//		 EdgeUpdate edgeUpdate=new EdgeUpdate(root, ac.getInvert(), graph,nodes, ac.getCore());
//		 TNode newRoot= edgeUpdate.insertEdge(8,10);	
//////////		 edgeUpdate.duibiTree();
//////////		 System.out.println("##########################");
////////		 TNode[] array1=edgeUpdate.rebuild();
////////		 TNode[] array2=edgeUpdate.travseToInvert(newRoot);
//		 edgeUpdate.traverse(newRoot);
//		 cykTest cTest=new cykTest();
//		 System.out.println(cTest.compare(array1, array2));

		 
		 
		 System.out.println("……………………………………………………………………………………………………");

//		 
		DataReader d1DataReader=new DataReader(Config.dblpGraph , Config.dblpNode); 
		int graph1[][]=d1DataReader.readGraph();
		String nodes1[][]=d1DataReader.readNode();  
////		long time=System.nanoTime();
		AdvancedIndex ac=new AdvancedIndex(graph1, nodes1);
		TNode root=ac.build();
//		
		EdgeInsertion edgeUpdate=new EdgeInsertion(root, ac.getInvert(), graph1,nodes1, ac.getCore());
		long time=System.nanoTime();
		edgeUpdate.insertEdge(652976 , 69070);
		System.out.println("aaaaaaaa"+(System.nanoTime()-time)/1000);
		long time1=System.nanoTime();
		edgeUpdate.insertEdge(370016,285526);
		System.out.println("aaaaa"+(System.nanoTime()-time1)/1000);
////		
//		TNode[] array1=edgeUpdate.rebuild();
//		TNode[] array2=edgeUpdate.travseToInvert(newroot);
//		cykTest cTest1=new cykTest();
//		cTest1.test500(graph1, nodes1);
//	  	System.out.println( cTest1.compare(array1, array2) );
//		long time3=System.nanoTime();
//		edgeUpdate.rebuild();
		
//		
//		AdvancedIndex ac1=new AdvancedIndex(graph1, nodes1);
//		TNode root312=ac1.build();
////		cTest1.traverse(root312);
//		long time3=System.nanoTime()-time;
////	    long time2=System.nanoTime();
//		System.out.println(time3/1000000);
//		EdgeUpdate edgeUpdate2=new EdgeUpdate(root312, ac1.getInvert(), graph1, nodes1,ac1.getCore());
//		
	 	 
//
//		TNode rNode=edgeUpdate2.duibiTree();
//		
		
//		 cTest1.traverse(newroot);
		 System.out.println("*********************");
		 
//		 System.out.println(array3.length);
//		 for(TNode x:array4) {
//			 System.out.println(x.getCore());
//			 System.out.println(x.getNodeSet().size()+"   ^^^^^^  ");
//			 System.out.println(x.getChildList().size()+"  &&&&   ");
//		 }
//		 System.out.println(cTest1.compare(array3, array4)+"最终测试");
//		
		 
//		 System.out.println("time2 over time1 is  :"+time3/(System.nanoTime()-time2));
	}
	
}
