package prep.PubMedPrep;

import java.io.*;
import java.util.*;
import java.util.Map.Entry;

import algorithm.ProfiledTree.PNode;
/**
 * 
 * @author chenyankai
 * @date Apr 26, 2017
 */

public class BuildMeshTree {
	private Map<String, MeshNode> map=null;// key:Node.code  value:meshNode
	private MeshNode root=null;
	private String treeFile=null;
	private Map<String, String> frstlvlMap=null;//store the first level taxa: A-Z
	private String outFileName=null;
	private String flatCPTreeFile=null;
	private String hierarchicalCPTreeFile=null;
	private boolean debug=true;
	private Map<Integer, PNode> cpTree=null;

	
	private int maxDepth=-1;
	private int maxWidth=-1;
	private int count=1;
	
	public BuildMeshTree(){
		this.map=new HashMap<String,MeshNode>();
		this.treeFile=ConfigPubmed.localPath+"mtreeSimple.txt";
		this.outFileName=ConfigPubmed.localPath+"MeshTree.txt";
		this.flatCPTreeFile=ConfigPubmed.flatCPTree;
		this.hierarchicalCPTreeFile = ConfigPubmed.localPath+"hierarchicalCptree.txt";
		this.cpTree=new HashMap<Integer,PNode>();
		this.maxDepth = ConfigPubmed.maxDepth;
		this.maxWidth = ConfigPubmed.maxWidth;
	}
	
//	public Map<String, MeshNode> getMap(){return this.map;}

	
	public MeshNode buildMeshTree(){
		preBuildMap();
		this.root=new MeshNode("root","R",0);
		root.setCode("0");
		root.setDepth(0);
		map.put("R", root);
		try {
			BufferedReader bReader = new BufferedReader(new FileReader(treeFile));
			String line=null;
			char letter='x';//initialize x as null 
			while((line=bReader.readLine())!=null){
				String[] contents=line.split(";");
				MeshNode node=null;
				if(letter!= contents[1].charAt(0)){
					//build the first level taxon ie,A-Z 16 taxa
					letter=contents[1].charAt(0);
					
					node=new MeshNode(frstlvlMap.get(letter+""),letter+"",count);
					map.get("R").getChildrenList().add(node);
					map.put(letter+"", node);
				}
				//build the next level taxa
				String[] leaves=contents[1].split("\\.");// split \\. not . 
				//get last code of keyword such as 111 of A01.111; 01 of A01
				String leafCode= leaves.length> 1 ? leaves[leaves.length-1]: leaves[0].substring(1);
				String fatherCode=leaves.length> 1 ? contents[1].substring(0, contents[1].length()-leafCode.length()-1):contents[1].substring(0, contents[1].length()-leafCode.length());
				node=new MeshNode(contents[0],contents[1],count);
				map.get(fatherCode).getChildrenList().add(node);
				map.put(contents[1], node);
			}

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			System.out.println("File not found!");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("Error in reading file!");
		}
		reCode(root);
		setDepth(root);
		setWidth(root);
		DFSCode(root);
		// to build the cp-tree
		copyNode(root);
		writeFlatCPTree();

		return root;
	}
	
	//build the first level taxa of the meshTree
	private void preBuildMap(){
		this.frstlvlMap=new HashMap<String,String>();
		frstlvlMap.put("A","Anatomy");
		frstlvlMap.put("B","Organisms");
		frstlvlMap.put("C","Diseases");
		frstlvlMap.put("D","Chemicals and Drugs");
		frstlvlMap.put("E","Analytical, Diagnostic and Therapeutic Techniques, and Equipment");
		frstlvlMap.put("F","Psychiatry and Psychology");
		frstlvlMap.put("G","Phenomena and Processes");
		frstlvlMap.put("H","Disciplines and Occupations");

	
	}
	

	public Map<String, Integer> getOldCodeDFSMap(){
		Map<String,Integer> map=new HashMap<String,Integer>();
		oldCodeDFS(root, map);
		return map;
	}
	
	private void oldCodeDFS(MeshNode root,Map<String, Integer> map){
		String oldCode=root.getoldCode();
		if(!map.containsKey(oldCode)) map.put(oldCode, root.getDFSNo());
		for(MeshNode node:root.getChildrenList()) oldCodeDFS(node, map);
	}
	

	
	private void copyNode(MeshNode root){
		//if the root is maxDepth deep, return 
		if(root.getDepth()>ConfigPubmed.maxDepth) {
			return;
		}
		
		int item=root.getDFSNo();
		PNode newPNode=null;
		if(!cpTree.containsKey(item)) {
			newPNode=new PNode(item);
			cpTree.put(item, newPNode);
		}
		else newPNode=cpTree.get(item);
	
		//if the root's child node depth is maxDepth deep, return;
		if(root.getDepth()+1>ConfigPubmed.maxDepth) return;
		List<MeshNode> list=root.getChildrenList();
		for(MeshNode node:list){
			int nodeItem=node.getDFSNo();
			PNode childNode=null;
			if(!cpTree.containsKey(nodeItem)){
				childNode=new PNode(nodeItem);
				cpTree.put(nodeItem, childNode);
			}
			else childNode=cpTree.get(nodeItem);
			
			newPNode.addPNode(childNode);
			childNode.setFather(newPNode);
		}
		
		//recursively copy children nodes
		for(MeshNode node:list) copyNode(node);
	}
	
	//recode the new code
	private void reCode(MeshNode root){
		String code=root.getNewCode()+"";
		int BFScount=1;
		for(MeshNode node:root.getChildrenList()){
//			node.setNum(count);
			node.setCode(code+"."+BFScount);
			BFScount++;
		}
		for(MeshNode node:root.getChildrenList()){ reCode(node);}
	}
		
	//recode the DFS code of the MeshNode 
	private void DFSCode(MeshNode root){
		if(root.getDepth()<=maxDepth){
			root.setDFSNo(count);
			count++;
			for(MeshNode node:root.getChildrenList()){
				DFSCode(node);
			}
		}
	}
		
	//recursively set a root depth value
	private void setDepth(MeshNode root){
		for(MeshNode child:root.getChildrenList()){
			child.setDepth(root.getDepth()+1);
		}
		for(MeshNode child:root.getChildrenList()){
			setDepth(child);
		}
	}
		
	//recursively modify the meshTree to less than maxWidth child node sizes
	private void setWidth(MeshNode root){
		List<MeshNode> childList = root.getChildrenList();
		List<MeshNode> newChildList = new ArrayList<MeshNode>();
		int bound = childList.size();
		Random random = new Random();
		if(bound>maxWidth){
			while(newChildList.size()!=maxWidth){		
				MeshNode node=childList.get(random.nextInt(bound));
				if(!newChildList.contains(node)) {
					newChildList.add(node);
				}
			}
			root.setChild(newChildList);
		}	
		for(MeshNode child:root.getChildrenList()) setWidth(child);
	}
	
	//write the meshtree
	public void writeMeshTree(){
		try {
			//clear existing contents
			FileWriter fileWriter=new FileWriter(this.outFileName);
			fileWriter.write("");
			fileWriter.close();
			
			//rewrite the files 
			fileWriter=new FileWriter(this.outFileName,true);
			fileWriter.write(root.toString(""));
			fileWriter.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	public Map<Integer, PNode> getCPTree(){
		return this.cpTree;
	}
	
	//write the hierarchical form of CPtree file
	public void writeHierarchicalCPTree(){
		PNode PTreeRoot=cpTree.get(1);
		try {
			FileWriter fWriter = new FileWriter(this.hierarchicalCPTreeFile);
			fWriter.write("");
			fWriter.close();
			fWriter = new FileWriter(this.hierarchicalCPTreeFile,true);
			fWriter.write(PTreeRoot.toString(""));
			fWriter.close();
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	//write the flat form of CPtree file
		public void writeFlatCPTree(){
			PNode PTreeRoot=cpTree.get(1);
			try {
				FileWriter fWriter = new FileWriter(this.flatCPTreeFile);
				fWriter.write("");
				fWriter.close();
				fWriter = new FileWriter(this.flatCPTreeFile,true);
				fWriter.write(PTreeRoot.toString());
				fWriter.close();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		}
	
	//write the oldCodeMeshTree.txt file
	public void writeFile(String file){
		try {
			//clear the exsiting content
			FileWriter fileWriter = new FileWriter(file);
			fileWriter.write("");
			fileWriter.close();
			
			//rewrite the file 
			fileWriter = new FileWriter(file,true);
			fileWriter.write(root.toString());
			fileWriter.close();
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	

	
	

	public static void main(String[] args){
		BuildMeshTree bmTree=new BuildMeshTree();
		bmTree.buildMeshTree();
//		System.out.println(bmTree);
//		bmTree.writeMeshTree();
		bmTree.writeHierarchicalCPTree();
//		bmTree.writeFile(ConfigPubmed.localPath+"oldCodeMeshTree.txt");
	}
	
}
