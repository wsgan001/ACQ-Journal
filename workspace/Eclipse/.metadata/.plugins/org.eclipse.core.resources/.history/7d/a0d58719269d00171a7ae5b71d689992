package algorithm.basic;

import java.util.*;

import javax.print.attribute.HashAttributeSet;

import algorithm.DataReader;
import algorithm.DecomposeKCore;
import algorithm.FindCKCore;
import algorithm.FindCKSubG;
import algorithm.ProfiledTree.PNode;
import algorithm.ProfiledTree.PTree;
import config.Config;

public class BFS {
	private int[][] graph = null;
	private int[][] nodes = null;
	private int core[] = null;
	private int queryId= -1;
	private PTree pTree = null;
	private Map<Integer, PNode> pTreeMap=null;

//	private Map<Set<Integer>, int[]> output=null;
	
	private Map<Set<Integer>, Set<Integer>> output = null;

	private boolean DEBUG = false;
	
	
	public BFS(int[][] graph, int[][] nodes){
		this.graph=graph;
		this.nodes=nodes;
		DecomposeKCore kCore=new DecomposeKCore(this.graph);
		core=kCore.decompose();
		this.pTree=new PTree();
//		this.output=new HashMap<Set<Integer>, int[]>();
		this.output = new HashMap<Set<Integer>,Set<Integer>>(); 
		
	}
	

	
	public BFS(String graphFile, String nodeFile,Map<Integer, PNode> CPTreeMap){
		DataReader dataReader = new DataReader(graphFile, nodeFile);
		this.graph = dataReader.readGraph();
		this.nodes = dataReader.readNodes();
		DecomposeKCore kCore=new DecomposeKCore(this.graph);
		core=kCore.decompose();
		this.pTree= new PTree(CPTreeMap);
//		this.output=new HashMap<Set<Integer>, int[]>();
		this.output = new HashMap<Set<Integer>,Set<Integer>>(); 
	}
	
	
	public void query(int queryId){
		this.queryId = queryId;
		if(core[queryId]<Config.k){
			System.out.println("No qualified connected k-core!");
			return;
		}
	
		//step 1:find the connected k-core containing queryId
		FindCKCore findCKCore=new FindCKCore();
		Set<Integer> CKC=findCKCore.findCKC(graph, core, queryId);
		if(CKC.size()<Config.k+1) return; 
		System.out.println("CKC: "+CKC.size());

		
		//------------------------DEBUG------------------------------
				if(DEBUG){
					for(int x:CKC) {
						String append="CKC users: "+x+" shared items: ";
						for(int y:nodes[x]) append+=y+" ";
						System.out.println(append);
					}
				}
		//----------------------END DEBUG----------------------------
	
		//step 2: mining all maximal common subsequences
		pTreeMap=pTree.buildPtree(nodes[queryId]);

		BFSMine(CKC);
	
	}
	
	
	
//	private void BFSMine(Set<Integer> CKC){
//		Queue<Set<Integer>> patternQueue = new LinkedList<Set<Integer>>();
//		Queue<Set<Integer>> userQueue = new LinkedList<Set<Integer>>();
//		Set<Integer> startPattern = new HashSet<Integer>();
//		startPattern.add(1);
//		patternQueue.add(startPattern);
//		userQueue.add(CKC);
//	
//		while(!patternQueue.isEmpty() && !userQueue.isEmpty()){
//			Set<Integer> patternToCheck = patternQueue.poll();
//			Set<Integer> usersTocheck = userQueue.poll();
//			
//			//if already reach the maximum pattern then return
//			if(patternToCheck.size()==nodes[queryId].length){
//				output.put(patternToCheck, usersTocheck);
//				continue;
//			}
//			
//			List<Integer> RMPath = getRMPath(patternToCheck);
//			for(int x:RMPath){
//				for(PNode node:pTreeMap.get(x).getChildlist()){
//					int newItem = node.getId();
//					if(!patternToCheck.contains(newItem)){
//						Set<Integer> newPattern = new HashSet<Integer>();
//						newPattern.addAll(patternToCheck);
//						newPattern.add(newItem);
//						
//						Set<Integer> newUsers = obtainNewUsers(newItem, usersTocheck);
//						if(!newUsers.isEmpty()){
//							patternQueue.add(newPattern);
//							userQueue.add(newUsers);
//						}else{
//							checkMax(patternToCheck, usersTocheck);
//						}
//						
//					}
//					
//				}
//			}	
//		}
//	}
	
	
	private void BFSMine(){
		Queue<Set<Integer>> patternQueue = new LinkedList<Set<Integer>>();
		Set<Integer> startPattern = new HashSet<Integer>();
		startPattern.add(1);
		patternQueue.add(startPattern);
		
	
		while(!patternQueue.isEmpty()){
			Set<Integer> patternToCheck = patternQueue.poll();
			
			//if already reach the maximum pattern then return
			if(patternToCheck.size()==nodes[queryId].length){
				output.put(patternToCheck, usersTocheck);
				continue;
			}
			
			List<Integer> RMPath = getRMPath(patternToCheck);
			for(int x:RMPath){
				for(PNode node:pTreeMap.get(x).getChildlist()){
					int newItem = node.getId();
					if(!patternToCheck.contains(newItem)){
						Set<Integer> newPattern = new HashSet<Integer>();
						newPattern.addAll(patternToCheck);
						newPattern.add(newItem);
						
						Set<Integer> newUsers = obtainNewUsers(newPattern);
						if(!newUsers.isEmpty()){
							patternQueue.add(newPattern);
						}else{
							checkMax(patternToCheck, usersTocheck);
						}
						
					}
					
				}
			}	
		}
	}
	
	
	private List<Integer> getRMPath(Set<Integer> seq){
		List<Integer> RMPath = new ArrayList<Integer>();
		int last = -1;
		for(Iterator<Integer> it=seq.iterator();it.hasNext();){
			int current = it.next();
			if(last < current) last = current;
		} 
		PNode lastNode = pTreeMap.get(last);
		while(lastNode.father!=lastNode){
			RMPath.add(lastNode.getId());
			lastNode= lastNode.father;
		}
		RMPath.add(1);
		return RMPath;
	}
	
//	private Set<Integer> obtainNewUsers(int newItem, Set<Integer> users){
//		Set<Integer> newUsers = new HashSet<Integer>();
//		
//		for(Iterator<Integer> iter=users.iterator();iter.hasNext(); ){
//			int user = iter.next();
//			for(int item:nodes[user]){
//				if(item==newItem){
//					newUsers.add(user);
//					break;
//				}
//			}
//		}
//		
//		if(!users.equals(newUsers)){
//			FindCKSubG findCKSG=new FindCKSubG(graph, newUsers, queryId);
//			newUsers = findCKSG.findCKSG();
//			if(newUsers==null) newUsers = new HashSet<Integer>();
//		}
//		return newUsers;
//	}
	
	
	private Set<Integer> obtainNewUsers(Set<Integer> newPattern, Set<Integer> CKC){
		Set<Integer> newUsers = new HashSet<Integer>();
		
		for(Iterator<Integer> iter=CKC.iterator();iter.hasNext(); ){
			int user = iter.next();
			int[] seqOfUser =  nodes[user];
			for(int check:newPattern){
				for(int item:seqOfUser){
					
				}
			}
			
			
		}
		
		if(!users.equals(newUsers)){
			FindCKSubG findCKSG=new FindCKSubG(graph, newUsers, queryId);
			newUsers = findCKSG.findCKSG();
			if(newUsers==null) newUsers = new HashSet<Integer>();
		}
		return newUsers;
	}
	
	
	private boolean isContains(Set<Integer> pattern,int[]seq){
		if (seq.length==0) return false;
		
		
		
	}
	
	private void checkMax(Set<Integer> pattern, Set<Integer> users){
		if(output.isEmpty()) {
			output.put(pattern, users);
			return;
		}
		if(output.containsKey(pattern)) return;
		
		boolean flag = true;
		Iterator<Set<Integer>> iter = output.keySet().iterator();
		while(iter.hasNext()){
			Set<Integer> key = iter.next();
			if(key.size()>pattern.size()){
				if(key.containsAll(pattern)){
					flag=false;
					break;
				}
			}else if(key.size()<pattern.size()) {
				if(pattern.containsAll(key)){
					iter.remove();
				}
			}
		}
		if(flag==true) output.put(pattern, users);
		
	}
	
	
	
	
	//print all qualified community and its corresponding maximal subtrees
	public void print(){
		System.out.println("Now testing BFS algorithm!");
		System.out.println("output size"+output.size());
		Iterator<Set<Integer>> iterator=output.keySet().iterator();
		while(iterator.hasNext()){
			Set<Integer> set=iterator.next();
			String append="users: "+set.toString()+"  maximal seq: ";
			Set<Integer> users=output.get(set);
			System.out.println(users.size());
//			for(int x:users) append+=x+"  ";
//			System.out.println(append);	
		}
	}
	

	
	
	
}
