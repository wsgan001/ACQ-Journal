package EXP;

import java.io.*;
import java.util.*;
import java.util.Map.Entry;

import algorithm.CPTreeReader;
import algorithm.ProfiledTree.PNode;
import algorithm.kwIndex.KWTree;
import algorithm.kwIndex.Query1_margin.Query1;
import config.Config;
import config.Log;

public class DiversityEXP {
	


	private List<Integer> readQueryFile(String queryFile){
		List<Integer> queryList = new ArrayList<Integer>();
		try {
			BufferedReader bReader = new BufferedReader(new FileReader(queryFile));
			String line = null;
			while((line=bReader.readLine())!=null){
				queryList.add(Integer.parseInt(line));
			}
		} catch (Exception e) {
			// TODO: handle exception
			System.out.println(e.getMessage());
		}	
		return queryList;
	}
	
	private KWTree buildKWTree(String graphFile,String nodeFile,String CPtreeFile){
		CPTreeReader cpReader = new CPTreeReader(CPtreeFile);
		PNode root=cpReader.loadCPtreeRoot();
		
		KWTree kwTree1 = new KWTree(graphFile,nodeFile,root);
		kwTree1.build();
		return kwTree1;
	}
	
	private Map<Integer, Map<Set<Integer>,Set<Integer>>> queryK(KWTree kwTree1,String queryFile){
		Map<Integer, Map<Set<Integer>,Set<Integer>>> verticesMaximalPtreeMap = new HashMap<Integer,Map<Set<Integer>,Set<Integer>>>();
		Config.k = 6;
		
		
		Query1 query1 = new Query1(kwTree1.graph,kwTree1.getHeadList());
		List<Integer> queryList = readQueryFile(queryFile);
		
		for(int x:queryList){
			System.out.println("now query: "+ x);
			query1.query(x,3);
//			Set<Set<Integer>> result = query1.getMaximalPattern();
//			getPatternUsers
			Map<Set<Integer>,Set<Integer>> result = query1.getPatternUsers();
			if(!result.isEmpty()) verticesMaximalPtreeMap.put(x,result);
		}	
		return verticesMaximalPtreeMap;
	}
	
	public void writeResult(Map<Integer, Map<Set<Integer>,Set<Integer>>> map,String outFile){
	
		try{
			BufferedWriter stdout = new BufferedWriter(new FileWriter(outFile));
			for(Iterator<Integer> iter = map.keySet().iterator();iter.hasNext(); ){
				int key = iter.next();
				Map<Set<Integer>,Set<Integer>> patternUsers = map.get(key);
				String line = key+"";
				Iterator<Entry<Set<Integer>,Set<Integer>>> entryIt = patternUsers.entrySet().iterator();
				while(entryIt.hasNext()){
					Entry<Set<Integer>,Set<Integer>> entry = entryIt.next();
					Set<Integer> pattern = entry.getKey();
					Set<Integer> users = entry.getValue();
					line += "\t"+pattern.toString().substring(1,pattern.toString().length()-1)+":"
					+users.toString().substring(1,users.toString().length()-1);
				}	
				stdout.write(line);
				stdout.newLine();
			}
			stdout.flush();
			stdout.close();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	
public Map<Integer, Set<Set<Integer>>> readResult(String inFile){
    	Map<Integer, Set<Set<Integer>>> map = new HashMap<Integer, Set<Set<Integer>>>();
    	try {
			BufferedReader stdIn = new BufferedReader(new FileReader(inFile));
    		String line = null;
    		while((line=stdIn.readLine())!=null){
    			String[] fragment = line.split("\t");
    			int id = Integer.parseInt(fragment[0]);
    			Set<Set<Integer>> patterns = new HashSet<Set<Integer>>();
    			for(int i=1;i<fragment.length;i++){
    				String str = fragment[i];
    				Set<Integer> set = new HashSet<Integer>();
    				String[] items = str.split(",");
    				for(String x:items) set.add(Integer.parseInt(x.trim()));
    				patterns.add(set);
    			}
    			map.put(id, patterns);
    		}
		} catch (Exception e) {
			// TODO: handle exception
		}
    	return map;
    }



	
	private String countCommunity(Map<Integer, Map<Set<Integer>,Set<Integer>>>bigMap){
		Iterator<Map<Set<Integer>,Set<Integer>>> iter1 = bigMap.values().iterator();
		int totalCommunityNumber = 0;
		int acqCommunityNumber = 0;
		while(iter1.hasNext()){
		Map<Set<Integer>,Set<Integer>> map= iter1.next();
		
		
		int ACQMax = 0;
		for(Iterator<Set<Integer>> iter = map.values().iterator();iter.hasNext();){
			Set<Integer> one = iter.next();
			totalCommunityNumber ++;		
			if(one.size() > ACQMax) ACQMax = one.size();
		}
		for(Iterator<Set<Integer>> iter = map.values().iterator();iter.hasNext();){
			Set<Integer> one = iter.next();
			totalCommunityNumber ++;		
			if(one.size() == ACQMax) acqCommunityNumber++;
		}
	}
		return  "PCS community size: "+totalCommunityNumber+" ACQ communities: "+acqCommunityNumber+"\n";	
	}
	

	//count the distinct keywords in each query vertex
	private String distinctKeywords(Map<Integer, Set<Set<Integer>>> map){
			double totalACQWord = 0;
			double totalPCSWord = 0;
	
		for(Iterator<Set<Set<Integer>>> iter = map.values().iterator();iter.hasNext();){
			Set<Set<Integer>> communities = iter.next();
			int ACQMax = 0;
			Set<Integer> ACQWordBag = new HashSet<Integer>();
			Set<Integer> PCSWordBag = new HashSet<Integer>();
			for(Set<Integer> single:communities){
				if(single.size() > ACQMax) ACQMax = single.size();
 			}
			for(Set<Integer> single:communities){
				if(single.size()==ACQMax){
					ACQWordBag.addAll(single);
				}
				PCSWordBag.addAll(single);
			}
			
			totalACQWord += ACQWordBag.size();
			totalPCSWord += PCSWordBag.size();	
		}

		return "ACQ average distinct words: "+totalACQWord/map.size()+"  PCS average distinct words: "+totalPCSWord/map.size();
		
	}


	
	
	public void exp(String graph,String node,String CPTree,String queryFile,String outFile){
		KWTree kwtree = buildKWTree(graph, node, CPTree);
		Map<Integer, Map<Set<Integer>,Set<Integer>>> verticesMaximalPtreeMap = queryK(kwtree, queryFile);
//		String std = countCommunity(verticesMaximalPtreeMap);
//		Log.log(graph+"\n"+std);
		writeResult(verticesMaximalPtreeMap,outFile);
	}
	
	
	
	
	public static void main(String[] args){
		DiversityEXP diversityEXP = new DiversityEXP();
		diversityEXP.exp(Config.ACMDLGraph, Config.ACMDLNode, Config.ACMDLCPtree,Config.acmccsDataWorkSpace+"query1000.txt",Config.acmccsDataWorkSpace+"122result");
		diversityEXP.exp(Config.dblpGraph, Config.dblpNode1, Config.DBLPCPTree,Config.DBLPDataWorkSpace+"query1000.txt",Config.DBLPDataWorkSpace+"122result");
//		diversityEXP.exp(kwtree, Config.pubMedDiversityQueryFile4,Config.pubMedDataWorkSpace+"result4.txt");
//		diversityEXP.exp(kwtree, Config.pubMedDiversityQueryFile5,Config.pubMedDataWorkSpace+"result5.txt");
//		diversityEXP.exp(kwtree, Config.pubMedDiversityQueryFile6,Config.pubMedDataWorkSpace+"result6.txt");
//		diversityEXP.exp(kwtree, Config.pubMedDiversityQueryFile7,Config.pubMedDataWorkSpace+"result7.txt");
//		diversityEXP.exp(kwtree, Config.pubMedDiversityQueryFile8,Config.pubMedDataWorkSpace+"result8.txt");

//		kwtree = diversityEXP.buildKWTree(Config.ACMDLGraph, Config.ACMDLNode, Config.ACMDLCPtree);
//		diversityEXP.exp(kwtree, Config.ACMDLDiversityQueryFile4,Config.acmccsDataWorkSpace+"result4.txt");
//		diversityEXP.exp(kwtree, Config.ACMDLDiversityQueryFile5,Config.acmccsDataWorkSpace+"result5.txt");
//		diversityEXP.exp(kwtree, Config.ACMDLDiversityQueryFile6,Config.acmccsDataWorkSpace+"result6.txt");
//		diversityEXP.exp(kwtree, Config.ACMDLDiversityQueryFile7,Config.acmccsDataWorkSpace+"result7.txt");
//		diversityEXP.exp(kwtree, Config.ACMDLDiversityQueryFile8,Config.acmccsDataWorkSpace+"result8.txt");

//		kwtree = diversityEXP.buildKWTree(Config.dblpGraph, Config.dblpNode1, Config.DBLPCPTree);
//		diversityEXP.exp(kwtree, Config.dblpDiversityQueryFile4,Config.DBLPDataWorkSpace+"result4.txt");
//		diversityEXP.exp(kwtree, Config.dblpDiversityQueryFile5,Config.DBLPDataWorkSpace+"result5.txt");
//		diversityEXP.exp(kwtree, Config.dblpDiversityQueryFile6,Config.DBLPDataWorkSpace+"result6.txt");
//		diversityEXP.exp(kwtree, Config.dblpDiversityQueryFile7,Config.DBLPDataWorkSpace+"result7.txt");
//		diversityEXP.exp(kwtree, Config.dblpDiversityQueryFile8,Config.DBLPDataWorkSpace+"result8.txt");

//		kwtree = diversityEXP.buildKWTree(Config.FlickrGraph, Config.FlickrNode1, Config.FlickrCPTree);
//		diversityEXP.exp(kwtree, Config.flickrDiversityQueryFile4,Config.FlickrDataWorkSpace+"result4.txt");
//		diversityEXP.exp(kwtree, Config.flickrDiversityQueryFile5,Config.FlickrDataWorkSpace+"result5.txt");
//		diversityEXP.exp(kwtree, Config.flickrDiversityQueryFile6,Config.FlickrDataWorkSpace+"result6.txt");
//		diversityEXP.exp(kwtree, Config.flickrDiversityQueryFile7,Config.FlickrDataWorkSpace+"result7.txt");
//		diversityEXP.exp(kwtree, Config.flickrDiversityQueryFile8,Config.FlickrDataWorkSpace+"result8.txt");

		
		
	}
	
	
}





