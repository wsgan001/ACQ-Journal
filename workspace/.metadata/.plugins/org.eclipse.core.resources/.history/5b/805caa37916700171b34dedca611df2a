package algorithm.FPTreeAlgo;

import java.util.*;
import java.util.Map.Entry;
/**
@author chenyankai
@Date	Jul 11, 2017

*/
public class FPTree {

	private Map<Integer, int[]> database=null;
	private int k=-1;
	
	public FPTree(Map<Integer, int[]> DB,int k){
		this.database=DB;
		this.k=k;
	}
	
	public void Construct(){
		FPNode root=new FPNode("null", 0);
		
		
	}
	
	private void insert(){
		
		
	}
	
		private List<Map.Entry<Integer, Integer>> Scan(){
		//step1: counting tree nodes and its support
		Map<Integer, Integer> freSupMap=new HashMap<Integer,Integer>();
		Iterator<Integer> it=database.keySet().iterator();
		while(it.hasNext()){
			int index=it.next();
			for(int x:database.get(index)){
				if(freSupMap.containsKey(x)) freSupMap.put(x, freSupMap.get(x)+1);
				else freSupMap.put(x, 1);
			}
		}
		//step2: clear out those whose sup <=k
		Iterator<Integer> it1=freSupMap.keySet().iterator();
		while(it1.hasNext()){
			int index=it1.next();
			if(freSupMap.get(index)<=k) it1.remove();// note here should use iterator to delete items
		}
		
		//step3: sort frequent items with descending order sup
		List<Map.Entry<Integer, Integer>> list=new ArrayList<Map.Entry<Integer,Integer>>(freSupMap.entrySet());
		Collections.sort(list,new Comparator<Map.Entry<Integer, Integer>>() {
			@Override
			public int compare(Entry<Integer, Integer> o1, Entry<Integer, Integer> o2) {
				// TODO Auto-generated method stub
				return o1.getValue()>o2.getValue()?-1:1;
			}
		});
		
//		for(Map.Entry<Integer, Integer> map:list){
//			System.out.println(map.getKey()+" times "+map.getValue());
//		}
		return list;
	}
	
	public static void main(String[] args){
		Map<Integer, int[]> map=new HashMap<Integer,int[]>();
		int[] a1={1,2,3,4,5,7}; map.put(1,a1);
		int[] a2={1,3,5,7,9}; map.put(2,a2);
		int[] a3={1,2,3,5,8}; map.put(3,a3);
		int[] a4={1,2,4,5,7}; map.put(4,a4);
		int[] a5={1,2,3}; map.put(5,a5);
		int[] a6={1,2,3,4,5,7,10,11}; map.put(6,a6);

		FPTree fpTree=new FPTree(map, 3);
		fpTree.Scan();
	}
	
	
	
}
