package algorithm.basic;

import java.util.*;


import algorithm.DecomposeKCore;
import algorithm.FindCKCore;
import algorithm.LCS;
import config.Config;

/**
@author chenyankai
@Date	Jul 6, 2017
steps: (1) k-core; (2) maximal k+1 frequent subtree mining; (3) k-core. 
*/


public class BasicAlgorithm {
	private int graph[][]=null;//graph structure;  starting from 1
	private int nodes[][]=null;//the tree nodes of each node; starting from 1
	
	private int core[]=null;
	private int queryId=-1;
	private int minSup=Config.k+1;
	private PTree pTree=null;
	private Map<Integer, PNode> pTreeMap=null;
	
	//record the outputs
	private Map<Set<Integer>, int[]> output=null;
	
	private boolean DEBUG=true;
	

	public BasicAlgorithm(){
		this.pTree=new PTree();
		this.output=new HashMap<Set<Integer>, int[]>();
	}
	
	public BasicAlgorithm(int graph[][],int nodes[][]){
		this.graph=graph;
		this.nodes=nodes;
		DecomposeKCore kCore=new DecomposeKCore(graph);
		core=kCore.decompose();
		this.pTree=new PTree();
	}
	
	
	
	public void query(int queryId){
		this.queryId=queryId;
		if(core[queryId]<Config.k){
			System.out.println("No qualified connected k-core!");
			return;
		}
		
		//step 1:find the connected k-core containing queryId
		FindCKCore findCKCore=new FindCKCore();
		int[] CKC=findCKCore.findCKC(graph, core, queryId);
		for(int x:CKC) System.out.println(x);
		if(CKC.length<Config.k+1) return; 
		
		//step 2:lcs and filter those shared no subsequences
		LCS lcs=new LCS();
		Map<Integer, int[]> midRslt=new HashMap<Integer, int[]>();
		for(int vertex:CKC){
//			System.out.println(queryId+" __ "+vertex+" __ "+nodes[queryId]+"_____"+nodes[vertex]);
			if(vertex!=queryId){
				int[] tmp=lcs.lcs(nodes[queryId], nodes[vertex]);
				if(tmp.length!=0) midRslt.put(vertex, tmp);
			}else{
				pTree.loadPTree(nodes[vertex]);
				pTreeMap=pTree.getPtree();
			}
		}
		if(midRslt.size()<Config.k+1) return;
		
		Set<Integer> key=midRslt.keySet();
		for(int x:key) {
			int [] tmp=midRslt.get(x);
			System.out.println(x+": ");
			for(int y:tmp) System.out.print(y+"  ");
			System.out.println();
		}
		
		//step 3: mining all maximal common subsequences
	}
	
	
	public void mineMaxSubtree(){
		test();
		pTree=new PTree();
		pTreeMap=pTree.testLoadTree();
		int[]seq={1};
		Set<Integer> users=new HashSet<Integer>();
		
		for(int i=1;i<11;i++) users.add(i);
		enumerate(seq,users);
		printOutput();
		
	}
	
	private void printOutput(){
		Iterator<Set<Integer>> iterator=output.keySet().iterator();
		while(iterator.hasNext()){
			Set<Integer> set=iterator.next();
			System.out.print("users: "+set.toString());
			int[]a=output.get(set);
			System.out.print("  seq: ");
			for(int x:a) System.out.print(x+" ");
			System.out.println();
		}
	}
	
	private void enumerate(int[] seq,Set<Integer> users){
		List<int[]> nextSeqList= geneSubtree(seq);
		for(int[] nextSeq:nextSeqList){
			//------------------------DEBUG------------------------------
			if(DEBUG){
				System.out.print("checking next seq:" );
				for(int x:nextSeq) System.out.print(x+"  ");
				System.out.println();
			}
			//----------------------END DEBUG----------------------------
			Set<Integer> newUsers=check(nextSeq, users);
			//------------------------DEBUG------------------------------
			if(DEBUG){
				System.out.println("now the users are: ");
				for(int x:users) System.out.print(x+" ");
				System.out.println();
			}
			//----------------------END DEBUG----------------------------
			if(newUsers!=null) {
				enumerate(nextSeq,newUsers);
			}
		}
	}
	
	//checking whether satisfy connected and k-core
	private boolean satisfyKCore(Set<Integer> set){
		if(set.size()>=Config.k) return true;
		else return false;
	}
	
	//checking one pattern is one sub-pattern of the qualified pattern; true: new pattern flase: is not new pattern
	private boolean isNewItems(int[]seq){
		if(output.size()==0) return true;
		Iterator<int[]> iterator=output.values().iterator();
		System.out.println(output.size()+"   shdhasdhasdhashdashdhasdhas");
		
		while(iterator.hasNext()){
			int[] validatedSeq=iterator.next();
		//------------------------DEBUG------------------------------
			if(DEBUG) {
				System.out.print("subseq checking: ");
				for(int x:seq) System.out.print(x+"  ");
				System.out.println();
				
				System.out.print("validatedSeq checking: ");
				for(int x:validatedSeq) System.out.print(x+"  ");
				System.out.println();
			}
		//----------------------END DEBUG----------------------------
			
			if(seq.length<=validatedSeq.length){
				int x=0; int y=0;
				while(x<seq.length && y<validatedSeq.length){
					if(seq[x]==validatedSeq[y]){ x++; y++;}
					else if(seq[x]>validatedSeq[y]) {y++;}
					else break;
					
				}
				//compare to the end then seq is contained in validatedSeq: false
				if (x==seq.length)  return false;
			}
			
		}
		return true;	
	}
	
	//check one particular pattern can return all users that share it 
	private Set<Integer> check(int[] seq, final Set<Integer> users){
		if(!satisfyKCore(users)) return null;
		Set<Integer> newSet=new HashSet<Integer>();
		Iterator<Integer> iterator=users.iterator();
		while(iterator.hasNext()){
			int user=iterator.next();
			boolean isContained=true;
			int[] userTree=nodes[user];
			Set<Integer> userItemSet=new HashSet<Integer>();
			for(int x:userTree) userItemSet.add(x);
			
			for(int item:seq){
				if(!userItemSet.contains(item)) {
					isContained=false;
					break;
				}
			}
			if(isContained){
				newSet.add(user);
			}
		}
		if(newSet.size()<Config.k && users.size()>=Config.k && isNewItems(seq)){
			
			System.out.print("saved: "+users.toString()+"  seq:");
			for(int x:seq) System.out.print(x+"    ");
			System.out.println();
			
			output.put(users, seq);
			return null;
		}else {
			return newSet;
		}
	}
	
	
	//generate a new subtree from a subtree by add an node in the right most path
	private List<int[]>  geneSubtree(final int[] seq){
		List<Integer> rightmostPath=getRightmostPath(seq);
		//------------------------DEBUG------------------------------
		if(DEBUG) System.out.println("rightmost path:"+rightmostPath.toString() );
		//----------------------END DEBUG----------------------------
		List<int[]> nextSeq=new ArrayList<int[]>();
		for(int i=0;i<rightmostPath.size()-1;i++){
			int father=rightmostPath.get(i);
			int child=rightmostPath.get(i+1);
			List<Integer> childSet=pTreeMap.get(father).getChildName();
			if(child<childSet.get(childSet.size()-1)){
				for(int x:childSet){
					if(x>child){
						int[] b=new int[seq.length+1];
						System.arraycopy(seq, 0, b, 0, seq.length);
						b[b.length-1]=x;
						nextSeq.add(b);
						//------------------------DEBUG------------------------------
						if(DEBUG){
							System.out.print("new Array: ");
							for(int q:b) {
								System.out.print(q+" ");
							}
							System.out.println();
						}
						//----------------------END DEBUG----------------------------
					}
				}
			}
		}
		//last node of in the right most path
		int lastOne=rightmostPath.get(rightmostPath.size()-1);
		List<Integer> childSet=pTreeMap.get(lastOne).getChildName();
			for(int x:childSet){
					int[] b=new int[seq.length+1];
					System.arraycopy(seq, 0, b, 0, seq.length);
					b[b.length-1]=x;
					nextSeq.add(b);
					//------------------------DEBUG------------------------------
					if(DEBUG){
						System.out.println("poteintial new seq: ");
						for(int q:b) {
							System.out.print(q+" ");
						}
						System.out.println();
					}
					//----------------------END DEBUG----------------------------
			}
	
		
		return nextSeq;
	}
	
	
	//get the rightmost path of one subtree pattern
	private List<Integer> getRightmostPath(final int[] seq){
		return pTree.tracePath(seq[seq.length-1]);
	}
	
	
	public void test(){
		int graph[][] = new int[11][];
		int a1[] = {2, 3, 4, 5};graph[1] = a1;
		int a2[] = {1, 3, 4, 5};graph[2] = a2;
		int a3[] = {1, 2, 4};	graph[3] = a3;
		int a4[] = {1, 2, 3, 7};graph[4] = a4;
		int a5[] = {1, 2, 6};	graph[5] = a5;
		int a6[] = {5};			graph[6] = a6;
		int a7[] = {4};			graph[7] = a7;
		int a8[] = {9};			graph[8] = a8;
		int a9[] = {8};			graph[9] = a9;
		int a10[] = {};			graph[10] = a10;
		
		
		int nodes[][] = new int[11][];
		int k1[] = {1,2,3,4,6,7,12,14,15,17,19};nodes[1] = k1;
		int k2[] = {1,3,4,7,8,9,12,13,15};				nodes[2] = k2;
		int k3[] = {1,3,4,5,6,10,17};				nodes[3] = k3;
		int k4[] = {1,2,3,7,10,12};		nodes[4] = k4;
		int k5[] = {1,3,4,7,8,9,10};			nodes[5] = k5;
		int k6[] = {1,2,3,4,10,12,13,14,15};				nodes[6] = k6;
		int k7[] = {1,3,7,8,9};			nodes[7] = k7;
		int k8[] = {1,10,11,12,15};			nodes[8] = k8;
		int k9[] = {1,2,3,4};				nodes[9] = k9;
		int k10[] = {1,3,7,12};			nodes[10] = k10;
		
		this.graph=graph;
		this.nodes=nodes;
		DecomposeKCore kCore=new DecomposeKCore(graph);
		core=kCore.decompose();
	}
	
	
	public static void main(String[] args){
		
		
		BasicAlgorithm bAlgo=new BasicAlgorithm();
		Config.k=2;
	
		bAlgo.mineMaxSubtree();
		
		
		
		
	}
	

	
}
