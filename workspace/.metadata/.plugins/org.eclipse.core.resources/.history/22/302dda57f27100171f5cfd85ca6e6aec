package algorithm.basic;

import java.util.*;


public class PTree {
	private Map<Integer, PNode> pTree=null;// the complete P-tree 
	private PNode root=null;
	
	
	public PTree(){
		this.pTree=new HashMap<Integer,PNode>();
	}
	
//	public void add(int id,PNode node){
//		pTree.put(id,node);
//	}
		
	//build p-tree from the complete P-tree
	public Map<Integer,PNode> buildPtree(int[] items){
		LoadTree();
		
		Map<Integer, PNode> queryPTree=new HashMap<Integer, PNode>();
		
		//build ptree in bottom-up manner
		for(int i=items.length-1;i>0;i--){
			int item=items[i];
			PNode node=new PNode(item);
			queryPTree.put(item, node);
			
			int fatherItem=pTree.get(item).getFather().getId();
			System.out.println(item+" father item "+fatherItem);
			if(queryPTree.containsKey(fatherItem)){
				System.out.println("contains ");
				PNode father=queryPTree.get(fatherItem);
				System.out.println(1);
				connectPNode(father, node);
				System.out.println(2);
				System.out.println(3);
			}else{
			
				PNode father=new PNode(fatherItem);
				System.out.println(father.getChildlist().contains(node));
				connectPNode(father, node);
				System.out.println("item"+ item+" father "+node.getFather().getId());
				System.out.println(father.getChildlist().contains(node));
				queryPTree.put(fatherItem, father);
				System.out.println("second check "+queryPTree.get(fatherItem).getChildlist().contains(node));

			}
			
		}
		System.out.println("size "+queryPTree.size());
		root=queryPTree.get(items[0]);
		
		testMap(queryPTree);
		return queryPTree;	
	}
	
	//for connect father node and child node 
	private void connectPNode(PNode father,PNode child){
		child.setFather(father);
		father.addPNode(child);
	}
	
	//load the complete P-tree
	private void LoadTree(){
		//test data file: 
		Map<Integer,int[]> map=new HashMap<Integer,int[]>();
		int[]a1={2,3,10,12}; map.put(1, a1);
		int[]a2={};map.put(2, a2);
		int[]a3={4,7};map.put(3, a3);
		int[]a4={5,6};map.put(4, a4);
		int[]a5={};map.put(5, a5);
		int[]a6={};map.put(6, a6);
		int[]a7={8};map.put(7, a7);
		int[]a8={9};map.put(8, a8);
		int[]a9={};map.put(9, a9);
		int[]a10={11};map.put(10, a10);
		int[]a11={};map.put(11, a11);
		int[]a12={13,15};map.put(12, a12);
		int[]a13={14};map.put(13, a13);
		int[]a14={};map.put(14, a14);
		int[]a15={};map.put(15, a15);
		
		Iterator<Integer> it=map.keySet().iterator();
		while(it.hasNext()){
			int index=it.next();
			if(!pTree.containsKey(index)){
				PNode node=new PNode(index);
				for(int x:map.get(index)){
					PNode xnode=new PNode(x);
					connectPNode(node,xnode);
					pTree.put(x,xnode);
				}
				pTree.put(index,node);
			}
			else{
				PNode node=pTree.get(index);
				for(int x:map.get(index)){
					PNode xnode=new PNode(x);
					connectPNode(node,xnode);
					pTree.put(x,xnode);
				}
			}
		}
	}
	

	public List<Integer> tracePath(int x){
		List<Integer> path=new ArrayList<Integer>();
		while(pTree.get(x).getFather()!=null){
			path.add(x);
			x=pTree.get(x).getFather().getId();
		}
		path.add(x);
		Collections.reverse(path);
		return path;
	}
	
	
	public void testMap(Map<Integer, PNode> pTree){
		Iterator<Integer> it=pTree.keySet().iterator();
		while(it.hasNext()){
			int index=it.next();
			System.out.println("PNode "+pTree.get(index).getId()+" childList "+pTree.get(index).getChildlist().size());
			
		}
	}
	
	
	
	public void traverse(PNode root){
		System.out.println("now checking "+root.getId()+" childList size "+root.getChildlist().size());
		List<PNode> list=root.getChildlist();
		for(PNode x:list) traverse(x);
	}
	
	
	public String toString() {
		String temp ="";
		// append child nodes
		temp += root.toString("");
		return temp;
	}
	
	public static void main(String[] args){
		PTree pTree=new PTree();
		int[] items={1,2,3,7,8,10,11,12,15};
		pTree.buildPtree(items);
		System.out.println(pTree);
		
		
	}
	
}
