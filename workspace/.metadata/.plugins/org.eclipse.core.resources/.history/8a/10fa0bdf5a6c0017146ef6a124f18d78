package algorithm.FPTreeAlgo;

/**
@author chenyankai
@Date	Jul 19, 2017

This is an implementation of the FPMax algorithm (Grahne et al., 2004).
High Performance Mining of Maximal Frequent Itemsets (with J. Zhu).
*/
public class FPMax {
//use core number of k-core as the minSup: miniSup=k+1
 private int minSup=-1;
	
	public FPMax(int k){
		this.minSup=k+1;
	}
	
	
	
	public void fpMax(FPTree fpTree){
		//get the result of single path property 
		//and get the support of the single path if there exists one
		FPNode root=fpTree.getRoot();
		int[] result=fpTree.isSingleAndMiniSup(root);
		boolean singlePath=result[0]==1? true:false;
		int singlePathSup=result[1];
		
		//case 1:the FPtree contains a single path
		if(singlePath && singlePathSup>=minSup){
			
		}
		
		
		
		
		//case 2: the fptree contains more than a single path 
		
		
	}
	
	
	
}
